###########################################################################
#!/bin/bash
###########################################################################
#
#PBS -A quill


#PBS -l nodes=1:ppn=4

###PBS -l procs=4
#PBS -q medium
#
###########################################################################
#
nScripts=15
scriptNumber=1
nJobs=4
startSeed=$(( ( nJobs*(scriptNumber-1) ) + 1 ))
endSeed=$((startSeed+nJobs-1))
maxBigLoops=1
do_st1=1
do_st2=1
do_NLOplots=1
do_st3=1
do_st4=0
do_rwgt=0
do_lhef=0
do_py6=0
do_py8=0


###########################################################################
# Get the name of the directory we're submitting this script from.
basedir=$PBS_O_WORKDIR
# Tell the current worker node to go into it.
cd $basedir
#
# Check we have executables and a powheg.input-save input file.
if [ ! -e pwhg_main ] ; then
    echo ; echo "Could not find $PWD/pwhg_main executable. Quitting." ; echo
    exit
fi
if [ ! -e powheg.input-save ] ; then
    echo ; echo "Could not find $PWD/powheg.input-save input file. Quitting." ; echo
    exit
fi
#
# Tidy up
if [ $scriptNumber -eq 1 ] ; then
mv pwgcounters-st2-*.dat               technical-outputs/
mv pwg-st2-*-stat.dat                  technical-outputs/
mv FlavRegList realequiv realequivregions virtequiv bornequiv technical-outputs/
mv pwgborngrid.top pwghistnorms.top pwhg_checklimits          technical-outputs/
mv run-st2-*.log                       log-files/
mv pwg-[0-9][0-9][0-9][0-9]-stat.dat   technical-outputs/
mv pwg-[0-9][0-9][0-9][0-9]-*grid.top  technical-outputs/
mv pwg-*NLO.top                        NLO-output
mkdir -p bad_st2_files
mv pwg*save bad_st2_files
mv NLO-output/pwg*top-save bad_st2_files
fi
###########################################################################
###########################################################################
#                                                                         #
#        Determine upper bounding envelope for veto algorithm             #
#                                                                         #
###########################################################################
###########################################################################

if [ $scriptNumber -eq 1 ] ; then
	(echo -n ' ' ) >> Timings/Timings-initialisation.txt
	(echo -n Starting st3 ' ' ; date ) >> Timings/Timings-initialisation.txt
fi

mkdir st3-$scriptNumber
cd st3-$scriptNumber
cp ../*.dat .
cp ../*.top .
cp ../powheg.input-save .
cp ../pwhg_main .

cat powheg.input-save | sed 's/parallelstage.*/parallelstage 3/' > powheg.input

for i in `seq $startSeed $endSeed`
do
echo $i | ./pwhg_main > run-st3-$i.log 2>&1 &
done
wait

for i in `ls *.dat *.top *.log` ; do
if [ -e $basedir/$i ] ; then
    echo "File $i exists in base directory - not copying";
else
    echo "Copying $i to base directory";
    cp $i $basedir
fi
done

cd $basedir
rm -rf st3-$scriptNumber

if [ $scriptNumber -eq $nScripts ] ; then
	(echo -n Ending   st3 ' ' ; date ) >> Timings/Timings-initialisation.txt
fi
